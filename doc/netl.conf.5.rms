#TITLE netl.conf
#SECTION 5
#HEAD CORE software
#TAIL 18 June 1999
#START

#H NAME

i<netl.conf> - i<netl>(8) configuration file

#H DESCRIPTION

the file netl.conf is the main configuration file for the program
sa<netl>(8).  there is an example i<netl.conf> which comes with the
i<netl> distribution.  it is well commented and highly recommended that
you play around with that to learn its structure.  this is intended for
reference only.

blank lines and lines beginning with the # characters are ignored by
netl.  extra white space is ignored.

#H INITIALIZATION RULES

the first elements of the i<netl.conf> file should be a b<device>
statement, followed by an optional b<detect> statement and then an
optional list of b<alias> statements.  lets look at them first.

b<device> device type

this line specifies the device and what type it is.  type should be
ethernet, as that is the only device type currently supported and device
should indicate the device, such as eth0 or eth1.

b<detect>

this instructs sa<netl>(8) to detect the hostname that it is running on
and assign two aliases, local to the IP address of your machine, and
localhost to 127.0.0.1, traditionally loop back.  this is helpful if you
are using one standard configuration file over a whole network where more
than one machine may be running with the same configuration file.

b<alias> hostname ipnumber

this allows you to define an alias for a specific host.  this is name can
be used later in the configuration file (with the b<dstip=> and b<srcip=>
options), and is also used to report the hostname to sa<syslogd>(8) when
a log is triggered.

b<dir lib> "directory"

enables you to specify the directory where netl will look in order to
find dynamic netl modules.  see sa<netl_modules>(1) for more information.
by placing this strategically, you can draw modules from various
different directories, though i don't see much point in this.  this is
equivalent to the --lib-dir command line option.  see sa<netl>(8) for
more information on that.

b<dir dump> "directory"

allows you to specify the directory netl will dump packets to when the
dump action rule is used.  similar notations as to the b<dir lib> rule.  
equivalent to the --dump-dir command line option.

#H ACTION RULES

rule syntax is as follows:

action protocol if(requirement)

which can be shortened (if specified on a single line) to:

action protocol requirement

the parenthetical notation is useful for complicated, multi line
requirements.  action is one of

b<log> - send information about the datagram to sa<syslogd>(8) (by
default), or stdout (with the b<--foreground> option).  see the
sa<syslog.conf>(5) for information on redirecting syslogd output to a
specific file.

b<dump> - save the datagram to a file.  this will be a unique file in
/usr/local/lib/netl/dump.

b<ignore> - ignore the datagram, do not process any further rules.

b<dl> - dump and log the datagram.  this is equivalent to having a log
and then a dump rule with the same requirements.

b<null> - do nothing.  this is the desired action when using a filter
module which also does its own output.

b<userdefined> - this indicates a user defined filter module.  see
sa<netl_module>(1) for more information on the netl API.

protocol is one of b<tcp>, b<udp>, b<icmp>, b<ignp> (unimplemented),
b<raw>, b<ip> or b<&userdefined>.  tcp, udp, icmp and ignp are sub
protocols of ip.  currently only IPv4 is supported, but IPv6 is in the
works.  raw indicates a raw ethernet frame.  on such a packet, currently
only source and destination hardware addresses can be checked on such a
packet.  a user defined protocol must be implemented as a netl module.  
see the sa<netl_module>(1) man page for more information on programming
your own user defined protocol filters.  the netl distribution comes with
two useful filter modules, aside from the standard protocol filters.  
b<&gnr> logs the usual useful things, but is much faster than using the
equivalent protocol filter rules.  b<&ping> logs pings and "pongs" (my
term for ECHO_REPLY, the standard reply to a ping).

there are now experimental IPv6 filters, although they have not been
tested, and may not be completely implemented.  you are welcome to try
them out though.  if you use the i<netl> -6 option, then i<netl> will use
its standard filter rules on IPv6 packets.  you can also specify IPv4 and
IPv6 explicitly by adding a version number to the desired protocol.  for
example, b<tcp> becomes b<tcp4> for IPv4 or b<tcp6> for IPv6.  this
interface is likely to change in the near future.

the requirement of a rule is a list of the following.  you may only use a
particular requirement and its negation once, with the exception of the
b<flags> requirement, which may be used multiple times on the same line.  
not all requirements are valid for all protocols.  i<netl> will silently
ignore requirements which do not make sense for the protocol.  a
requirement may be negated by putting a `!' character in front of it.  
an example configuration will follow.

b<name=> is technically not a requirement.  it indicates a string by
which the packet may be identified.  this identification will be used by
log when sent to sa<syslogd>(8), or as part of the filename when dumped.

b<flags=> [TCP only] allows you to specify that certain TCP flags be set.  
each flag is separated with a comma (,) character.  valid flags are syn,
fin, rst, psh, ack, urg.  the special `flag' all is used to indicate that
all flags should be set.

b<dstport=> [TCP and UDP only] specify the destination port number.  for
example, httpd (web) requests are made to port 80.

b<srcport=> [TCP and UDP only] same as b<dstport=>, except this is for
source port numbers.

b<dstip=> [all IP protocols] this specifies the destination IP address,
either as a dotted decimal (10.10.10.1) or as an aliased hostname (see
b<alias> above).

an ip address may optionally be followed by a `/x' where x is the size of
the bitmask which should match the ip address.  for example, 10.0.0.0/8
will match 10.*.*.* and 150.135.0.0/16 will match 150.135.*.*.  this is
useful for making rules for a whole subnet.

b<srcip=> [all IP protocols] same as b<dstip=>, except this is for the
source IP address.

b<dsthw=> and b<srchw=> indicate the destination and source hardware
addresses at the beginning of the ethernet frame are to be checked.  a
hardware address is specified as six two digit hexadecimal numbers
delimited by the colon (:) character.  e.g. a6:f1:33:00:32:aa.

b<type=> and b<code=> [ICMP only] these allow you to specify the type and
code values on ICMP packets.  this may either be a numeric value, or the
appropriate ICMP_ code.  see the file lookup.c with the b<netl>
distribution for specific details.  the most common values are for
type=echo or type=echoreply which indicate a ping and a ping reply
respectively.

#H EXAMPLE

#INCLUDE ../conf/netl.conf

#EXEC tail
