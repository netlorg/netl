#TITLE netl
#SECTION 8
#HEAD CORE software
#TAIL 18 June 1999
#START

#H NAME

i<netl> - customizable network logger and sniffer

#H SYNOPSIS

i<netl> [options] ['config rule'] [...]

#H DESCRIPTION

i<netl> is a customizable low level network logger.

i<netl> can be configured to look for particular TCP, UDP or ICMP
packets, or can be setup to look for generic IP packets or even raw
ethernet frames.

i<netl's> TCP filters allow individual SYNs and ACKs (or any combination
of flags) to be logged, or dumped into a file for later perusal.  the
companion program sa<neta>(1) is used to disassemble those packets in a
human readable form.  typically, when a packet is dumped, it is sent into
/usr/local/lib/netl/dump, which should be readable only to root.

i<netl> is customizable and extendable.  version 1.02 introduces a highly
modular design, which allows you to write your own low level filters and
action modules in c.  for more information see the sa<netl_module>(1) man
page.

i<netl> deals with low level packets and is not concerned with source or
destination addresses.  by default, these fields in a IP packet are not
checked, so i<netl> can be used as a sniffer, in order to examine packets
which are caught by the interface, but not necessarily intended for your
machine.  sniffers are legitimate software, so long as you don't misuse
them.  DO NOT MISUSE i<netl>, IT IS FORBIDDEN BY THE AUTHOR.

i<netl> can be configured in one of three possible ways.  the first, and
most common is through a configuration file.  see sa<netl.conf>(5) for
specific details on the format of that file.  the second is by specifying
a rule on the command line.  in this case, the configuration file will
not be read, and only rules specified on the command line will be used.  
this is typically useful for debugging netl and constructing new rules
for testing.  the -z option is suggested in this case.  the final method
of configuring i<netl> is to write a filter or output module your self.  
this is by far the most efficient, but also the most time consuming, as
such modules must be written in C.  see the sa<netl_module>(1) man page
for details.

#H OPTIONS

all boolean options can be followed by a + or - to turn the value on or
off (respectively).  the default is to turn the option on, even if the
default value is also on.

b<-f>i<filename>, b<--file> i<filename>

	use an alternative config file.  if this option is not specified,
then /etc/netl.conf shall be used.

b<-z>, b<--foreground>, b<--background>

	run netl in the foreground, and send output to stdout.

b<-o>i<filename>, b<--tee> i<filename>

	when used with -z, this option sends output to filename as well
as stdout.

b<-r>, b<--resolve>, b<--dont-resolve>

	resolve IP numbers into fully qualified internet addresses, when
logging packets.  by default this is on.

b<-d>, b<--debug>

	print out configuration and quit.

b<-h>, b<--help>

	print out usage and quit.

b<-i>i<module>, b<--input> i<module>

	use i<module> as the input module.  by default, the module
default is used (which should be a symbolic link to the appropriate
module on your architecture).

b<-L>i<dir>, b<--lib-dir> i<dir>

	specify an alternate module directory.  by default,
/usr/local/lib/netl is used.

b<--generate-c>

	generate a netl module in c format which can then be compiled by
gcc.  typically, this is done through the netl compiler, sa<netlcc>(1).

b<--output-name> i<filename>

	when generating a c file (via that b<--generate-c> option), this
option specifies the c file name.  this is generally invoked by
sa<netlcc>(1).

b<--stdout>

	combination of b<--generate-c> and b<--output-name> which sends the C
code to stdout.

b<--dump-dir> directory

	specify a directory to put dumped datagrams into.  this is by
default /usr/local/lib/netl/dump

b<-6>

	use experimental IPv6 filters.  netl has special IPv6 filters
which it uses when this option is invoked.  netl will still filter IPv4
packets correctly.  see sa<netl.conf>(5) for more information.

#H PORTABILITY

an older version of i<netl> reportedly dumps core on sparc linux.  i do
not have access to this platform so i have no idea why.  if someone could
help me out in this area i would appreciate it.

i<netl> i<should> work on any linux platform.  however i've only been
able to test it on intel and alpha linux.  i have made consideration of
the possibility that the platform i<netl> is compiled on may not in fact
be little endian.  the big endian code is actually simpler and leads me
to think big endian hardware is better for networking--but i have no bid
endian hardware to test this on.

i<netl> probably will not work on any other unix platform with out a lot
of work.  if you are successful in porting i<netl> to other platforms,
please let me know what you did and i can add the appropriate code to my
i<netl> source.  what you will need to do, is create an input module for
your platform.  take a look at in/stub.c for a stub module.  the rest of
the code is pretty good portable ANSI C code.

i have attempted porting i<netl> to Windows 32, but have failed
miserably.  i have never in my life encountered an operating system which
was more programmer hostile in my life.  i have experience with VMS mind
you.

#H CREDITS

tyler parsons

i couldn't have done this program without the networking knowledge of
tyler parsons.  even after that, his alpha/beta testing has been
extremely useful in making netl what it is today.

gordon lyon

fellow computer science student, and handy dandy beta tester.

jeff thompson

early versions of netl were heavily derived from a program by jeff
thompson which didn't even quite work right.  i had to debug and correct
it.  when i got deeper in to the problem i discovered that his
`synlogger' (as it was called) was highly specialized and didn't have to
be.  netl was thus born.

graham the ollis <ollisg@netl.org>

my name is graham the ollis, i'm a computer science/math major at the
university of arizona.  or private contractor working as CORE software.  
if you have anything relevant or non-relevant to say about netl then i
would certainly like to hear from you.  especially if you have
improvements for netl.

#EXEC tail
