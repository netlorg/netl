#TITLE netl_module
#SECTION 1
#HEAD CORE software
#TAIL 18 June 1999
#START

#H NAME

i<netl_module> - user defined i<netl> module API.

#H DESCRIPTION

i<netl> modules allow a user with a pretty basic understanding of C write
his own additions to i<netl>, while relying on the existing power of the
i<netl> API.  there are currently three types of i<netl> modules, and
they shall be described in the following sections, but they all have a
few attributes in common which will be described here.  the i<netl>
distribution comes with a number of modules, which you will likely want
to look at.  i<netl> by default relies rather heavily on modules in the
i<netl> distribution.

a b<netl> module is just a dynamic object file (.so) similar to the
dynamic libraries that you file in your lib directories
(/lib/libc.so.6.1) for example.  i<netl> decides at run time which
modules need to be loaded by reading the configuration file (see
sa<netl.conf>(5)) or by command line rules (see sa<netl>(8)), and then
executes the appropriate action based on that configuration.

a .so file can be created by creating a C module, and compiling it using
the sa<gcc>(1) -shared option.  depending on the module type, there will
need to be various subroutines defined.  any module (regardless of type)
may define functions which take no arguments construct() and destruct().  
these functions will be called when the module is loaded and deallocated
respectively.

if you have perl, then you can use the sa<netlcc>(1) front end to compile
netl modules.  if installed correctly, you can give it a netl module
source code without having to know where the various libraries and header
files are located on the system.

by default, sa<netl>(8) will search the directly /usr/local/lib/netl for
modules (you can specify a different directly with the -L option).  once
you have created a i<netl> module, you will likely want to move it into
there so that it can be automatically loaded.

#H INPUT MODULE

a i<netl> process will always have exactly one input module when running.  
this is the code which actually grabs the packets from the network so
that they can then be filtered and dealt configuration file.  when
porting i<netl> to a new system, one will typically only have to write a
new input module, as the rest of the code is fairly portable ANSI C.

a i<netl> input module must define at least two functions:

void
b<prepare>(char *dev)

this code (if necessary) will prepare the device for later reading.  
typically, this routine will place the promiscuous mode.

int
b<grab>(char *buf)

this code actually grabs the ethernet frame from the network and writes
it into the buffer *buf.  *buf will be allocated by the netl system to be
large enough for your typical ethernet frame.

a good example of a i<netl> input module is the linux-ether input module
which comes with the i<netl> distribution.  it is a working
implementation for linux.  all input modules must be put in a directory
called `in' under the directory where netl searches for modules.  
typically this means /usr/local/lib/netl/in.

#H FILTER MODULE

a filter module decides if the ethernet frame passed to it is worthy of
note.  this is how the protocol filters are implemented.  you can program
you filter to do with the packet as you please, but a better design would
be to pass the packet (if it is a `hit') to the output module, which will
be passed to the module from the netl main code.

a filter module should include (in this order) these header files which
come with the i<netl> distribution: netl/global.h netl/ether.h netl/ip.h
netl/config.h

a filter module should also have a structure of type configlist called
req, which most likely can be ignored.  this structure is largely used
for protocol filters only.

void b<check>(u8 *dg, size_t len) is where the packet gets sent. u8 * is
a eight bit integer pointer, and dg is the pointer to the datagram.  len
is the actual length of the datagram.

all filter modules must be placed in a directory called `filt' under the
directory where netl searches for modules.  typically this means
/usr/local/lib/netl/filt.

here is an example module which logs pings and pongs (a pong is my
private term for an ICMP_ECHOREPLY which is what gets sent back to you
when you ping a host).

#INCLUDE ../filt/ping.c

to compile this module,

% netlcc ping.c

and then copy it into the module directory at the correct place.

% cp ping.so /usr/local/lib/netl/filt

and you can try it out by running (as root) netl thus:

# netl -z 'null &ping'

here is a more complicated module, which i use on my system.

#INCLUDE ../filt/gnr.c

notice the use of structures such as iphdr, udphdr and the like.  it is
useful to take a look at netl/ip.h as this contains most of the
structures useful for IPv4.

#H OUTPUT MODULE

the last type of module is used for output.  once the packet has been
deemed interesting by whatever filter module, it is passed to an output
module.  once again, output modules must live in a directory called `out'
where ever i<netl> is searching for modules.  this is usually
/usr/local/lib/netl/out.

possible uses for this type of module include an X interface which sends
popup messages to a user when someone is trying to hack into his machine.  
this is just an idea.

an output module should define an integer b<action_done> which is used by
the protocol filters to keep it from logging or dumping a particular
frame more than once, while allowing a frame to be logged and dumped by
different rules.  in general, set b<action_done> to TRUE immediately when
b<action>() is called.

void b<action>(u8 *dg, struct configitem *cf, size_t len) is called
directly by whichever filter module is in use.  once again, dg is the
pointer to the datagram and len is the length of that datagram.  cf is a
pointer to a config item which can for the most part be ignored.  the one
useful portion of the configitem is the member logname which is the
requirement b<name=> you specified in the configuration file (see
sa<netl.conf>(5)).  cf->logname is the desired value.

there are copious examples that come with the i<netl> distribution, but
none really worth going over at the moment.

#EXEC tail
