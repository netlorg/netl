.ad b
.TH netl 8 "18 June 1999" "CORE software" "CORE software"
.AT 3
.de sh
.br
.ne 5
.PP
\fB\\$1\fR
.PP
..
.PP
.SH NAME
.PP
.I netl
- customizable network logger and sniffer
.PP
.SH SYNOPSIS
.PP
.I netl
[options] ['config rule'] [...]
.PP
.SH DESCRIPTION
.PP
.I netl
is a customizable low level network logger.
.PP
.I netl
can be configured to look for particular TCP, UDP or ICMP
packets, or can be setup to look for generic IP packets or even raw
ethernet frames.
.PP
.I netl's
TCP filters allow individual SYNs and ACKs (or any combination
of flags) to be logged, or dumped into a file for later perusal.  the
companion program 
.BR neta (1)
is used to disassemble those packets in a
human readable form.  typically, when a packet is dumped, it is sent into
/usr/local/lib/netl/dump, which should be readable only to root.
.PP
.I netl
is customizable and extendable.  version 1.02 introduces a highly
modular design, which allows you to write your own low level filters and
action modules in c.  for more information see the 
.BR netl_module (1)
man
page.
.PP
.I netl
deals with low level packets and is not concerned with source or
destination addresses.  by default, these fields in a IP packet are not
checked, so 
.I netl
can be used as a sniffer, in order to examine packets
which are caught by the interface, but not necessarily intended for your
machine.  sniffers are legitimate software, so long as you don't misuse
them.  DO NOT MISUSE 
.I netl
, IT IS FORBIDDEN BY THE AUTHOR.
.PP
.I netl
can be configured in one of three possible ways.  the first, and
most common is through a configuration file.  see 
.BR netl.conf (5)
for
specific details on the format of that file.  the second is by specifying
a rule on the command line.  in this case, the configuration file will
not be read, and only rules specified on the command line will be used.  
this is typically useful for debugging netl and constructing new rules
for testing.  the -z option is suggested in this case.  the final method
of configuring 
.I netl
is to write a filter or output module your self.  
this is by far the most efficient, but also the most time consuming, as
such modules must be written in C.  see the 
.BR netl_module (1)
man page
for details.
.PP
.SH OPTIONS
.PP
all boolean options can be followed by a + or - to turn the value on or
off (respectively).  the default is to turn the option on, even if the
default value is also on.
.PP
.B -f
.I filename
, 
.B --file
.I filename
.PP
	use an alternative config file.  if this option is not specified,
then /etc/netl.conf shall be used.
.PP
.B -z
, 
.B --foreground
, 
.B --background
.PP
	run netl in the foreground, and send output to stdout.
.PP
.B -o
.I filename
, 
.B --tee
.I filename
.PP
	when used with -z, this option sends output to filename as well
as stdout.
.PP
.B -r
, 
.B --resolve
, 
.B --dont-resolve
.PP
	resolve IP numbers into fully qualified internet addresses, when
logging packets.  by default this is on.
.PP
.B -d
, 
.B --debug
.PP
	print out configuration and quit.
.PP
.B -h
, 
.B --help
.PP
	print out usage and quit.
.PP
.B -i
.I module
, 
.B --input
.I module
.PP
	use 
.I module
as the input module.  by default, the module
default is used (which should be a symbolic link to the appropriate
module on your architecture).
.PP
.B -L
.I dir
, 
.B --lib-dir
.I dir
.PP
	specify an alternate module directory.  by default,
/usr/local/lib/netl is used.
.PP
.B --generate-c
.PP
	generate a netl module in c format which can then be compiled by
gcc.  typically, this is done through the netl compiler, 
.BR netlcc (1).
.PP
.B --output-name
.I filename
.PP
	when generating a c file (via that 
.B --generate-c
option), this
option specifies the c file name.  this is generally invoked by
.BR netlcc (1).
.PP
.B --stdout
.PP
	combination of 
.B --generate-c
and 
.B --output-name
which sends the C
code to stdout.
.PP
.B --dump-dir
directory
.PP
	specify a directory to put dumped datagrams into.  this is by
default /usr/local/lib/netl/dump
.PP
.B -6
.PP
	use experimental IPv6 filters.  netl has special IPv6 filters
which it uses when this option is invoked.  netl will still filter IPv4
packets correctly.  see 
.BR netl.conf (5)
for more information.
.PP
.SH PORTABILITY
.PP
an older version of 
.I netl
reportedly dumps core on sparc linux.  i do
not have access to this platform so i have no idea why.  if someone could
help me out in this area i would appreciate it.
.PP
.I netl
.I should
work on any linux platform.  however i've only been
able to test it on intel and alpha linux.  i have made consideration of
the possibility that the platform 
.I netl
is compiled on may not in fact
be little endian.  the big endian code is actually simpler and leads me
to think big endian hardware is better for networking--but i have no bid
endian hardware to test this on.
.PP
.I netl
probably will not work on any other unix platform with out a lot
of work.  if you are successful in porting 
.I netl
to other platforms,
please let me know what you did and i can add the appropriate code to my
.I netl
source.  what you will need to do, is create an input module for
your platform.  take a look at in/stub.c for a stub module.  the rest of
the code is pretty good portable ANSI C code.
.PP
i have attempted porting 
.I netl
to Windows 32, but have failed
miserably.  i have never in my life encountered an operating system which
was more programmer hostile in my life.  i have experience with VMS mind
you.
.PP
.SH CREDITS
.PP
tyler parsons
.PP
i couldn't have done this program without the networking knowledge of
tyler parsons.  even after that, his alpha/beta testing has been
extremely useful in making netl what it is today.
.PP
gordon lyon
.PP
fellow computer science student, and handy dandy beta tester.
.PP
jeff thompson
.PP
early versions of netl were heavily derived from a program by jeff
thompson which didn't even quite work right.  i had to debug and correct
it.  when i got deeper in to the problem i discovered that his
`synlogger' (as it was called) was highly specialized and didn't have to
be.  netl was thus born.
.PP
graham the ollis <ollisg@netl.org>
.PP
my name is graham the ollis, i'm a computer science/math major at the
university of arizona.  or private contractor working as CORE software.  
if you have anything relevant or non-relevant to say about netl then i
would certainly like to hear from you.  especially if you have
improvements for netl.
.PP
.SH SEE ALSO
.PP
.BR netl (8),
.BR netl.conf (5),
.BR netlcc (1),
.BR netl_install (1),
.BR netl_module (1),
.BR neta (1),
.BR hwpassive (8),
.BR hwlookup (1),
.BR dcp (1)
and 
.BR xd (1)
.PP
.SH BUGS
.PP
there are almost certainly bugs, please report them to me.  send bugs and
bug fixes to netl@netl.org.  the netl home page is at
http://www.netl.org which should contain up to date information on
.B netl
.
.PP
i have attempted to write pretty readable documentation, however, i'm not
really the best technically writer.  if you are, maybe we could
colaborate?
.PP
.SH COPYING
.PP
Copyright 1996, 1997, 1999 Graham THE Ollis
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.
.PP
You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
.PP
.PP
.SH AUTHOR
.PP
Graham THE Ollis <ollisg@netl.org>
